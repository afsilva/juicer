#!/usr/bin/env python

import argparse
import juicer.admin

def main():

    parser = argparse.ArgumentParser(description='Manage pulp')
    juicer.admin.parser = parser

    parser.add_argument('-v', action='count', \
                            help='Increase the verbosity (up to 3x)')

    ##################################################################
    # Keep the different commands separate
    subparsers = parser.add_subparsers(title='Commands', \
                                           dest='command', \
                                           description='\'%(prog)s COMMAND -h\' for individual help topics')

    ##################################################################
    # Create the 'create_repo' sub-parser
    parser_create_repo = subparsers.add_parser('create-repo', help='Create pulp repository')

    parser_create_repo.add_argument('name', metavar='name', \
                                 help='The name of your repo')

    parser_create_repo.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to create your repository')

    parser_create_repo.set_defaults(ja=juicer.admin.create_repo)


    ##################################################################
    # Create the 'create_user' sub-parser
    parser_create_user = subparsers.add_parser('create-user', help='Create pulp user')

    parser_create_user.add_argument('--name', metavar='name', \
                                        dest='name', \
                                        help='Full name of user')

    parser_create_user.add_argument('--login', metavar='login', \
                                        dest='login', \
                                        help='Login user id for user')

    parser_create_user.add_argument('--password', metavar='password', \
                                        dest='password', \
                                        help='Plain text password for user')

    parser_create_user.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to create pulp user')

    parser_create_user.set_defaults(ja=juicer.admin.create_user)


    ##################################################################
    # Create the 'list_repos' sub-parser
    parser_list_repos = subparsers.add_parser('list-repos', help='List all repos')

    parser_list_repos.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to list repos')

    parser_list_repos.set_defaults(ja=juicer.admin.list_repos)


    ##################################################################
    # Create the 'show_repo' sub-parser
    parser_show_repo = subparsers.add_parser('show-repo', help='Show pulp repository')

    parser_show_repo.add_argument('name', metavar='name', \
                                 help='The name of your repo')

    parser_show_repo.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to show your repository')

    parser_show_repo.set_defaults(ja=juicer.admin.show_repo)


    ##################################################################
    # Create the 'show_user' sub-parser
    parser_show_user = subparsers.add_parser('show-user', help='Show pulp user')

    parser_show_user.add_argument('login', metavar='login', \
                                        help='Login user id for user')

    parser_show_user.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to show user')

    parser_show_user.set_defaults(ja=juicer.admin.show_user)


    ##################################################################
    # Create the 'delete_repo' sub-parser
    parser_delete_repo = subparsers.add_parser('delete-repo', help='Delete pulp repository')

    parser_delete_repo.add_argument('name', metavar='name', \
                                 help='The name of your repo')

    parser_delete_repo.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to delete your repository')

    parser_delete_repo.set_defaults(ja=juicer.admin.delete_repo)


    ##################################################################
    # Create the 'delete_user' sub-parser
    parser_delete_user = subparsers.add_parser('delete-user', help='Delete pulp user')

    parser_delete_user.add_argument('login', metavar='login', \
                                        help='Login user id for user')

    parser_delete_user.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to delete user')

    parser_delete_user.set_defaults(ja=juicer.admin.delete_user)

    ##################################################################
    # Create the 'role_add' sub-parser
    parser_role_add = subparsers.add_parser('role-add', help='Add user to role')

    parser_role_add.add_argument('--login', metavar='login', \
                                        help='Login user id for user')

    parser_role_add.add_argument('--role', metavar='role', \
                                        help='Role to add user to')

    parser_role_add.add_argument('--in', metavar='envs', \
                                 nargs="+", \
                                 dest='envs', \
                                 default=['re', 'qa', 'stage', 'prod'], \
                                 help='The environments in which to add user to role')

    parser_role_add.set_defaults(ja=juicer.admin.role_add)


    ##################################################################
    # Create the 'list_roles' sub-parser
    parser_list_roles = subparsers.add_parser('list-roles', help='List all roles')

    parser_list_roles.add_argument('--in', metavar='envs', \
                                       nargs="+", \
                                       dest='envs', \
                                       default=['re', 'qa', 'stage', 'prod'], \
                                       help='The environments in which to list roles')
    
    parser_list_roles.set_defaults(ja=juicer.admin.list_roles)


    args = parser.parse_args()
    args.ja(args)

if __name__ == '__main__':
    main()

"""
usage() {
    cat <<EOF
usage: ${0} {show | promote | trash | create-repo}

${0} Promote release carts.

Sub-Commands:
    show CART-NAME
        Print the contents of CART-NAME.

    promote [ENVIRONMENT] CART-NAME
        Promote the contents of CART-NAME into ENVIRONMENT. ${0} Does
        'The Right Thing' to ensure nothing skips required
        environments. Invokes rpm signing when required.

        Promotes to the 'next' environment if ENVIRONMENT is omitted.

    trash CART-NAME
        Delete CART-NAME.

    create-repo REPOSITORY [--in ENV1, [ ENV2, [...] ] ]
        Create a new REPOSITORY. By default they are created in RE,
        QA, STAGE, and PROD. Use --in to specify specific
        environments.

Examples:
  Promote CRQ1337 from RE into QA:
    $ ${0} promote qa CRQ1337
    Promoted xyz RPMs from RE into QA.

  Promote CRQ1337 into STAGE:
    $ ${0} promote CRQ1337
    ...
    ...[signing process initiated]...
    ...
    Signed and promoted xyz RPMs from QA into STAGE.

  Create a megafrobber repository:
    $ ${0} create-repo megafrobber
    Created 'megafrobber' repository in RE, QA, STAGE, and PROD.

  Create a new repo in just RE and QA:
    $ ${0} create-repo minifrobber --in RE QA
    Created 'minifrobber' repository in RE and QA.

EOF
}





while [ ${1} ]; do
    if [ "${1}" = "-h" -o "${1}" = "--help" ]; then
        usage
        exit;
    fi
done

echo "done!"
"""
